{"metadata":{"roleHeading":"Article","role":"article","title":"Exports","modules":[{"name":"SwiftGodot"}]},"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"text":"This document deals with exporting properties, for information about exposing","type":"text"},{"text":" ","type":"text"},{"text":"functions to the Godot world, see the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/CustomTypes"},{"type":"text","text":" document."}],"type":"paragraph"},{"level":2,"text":"Introduction to Exports","type":"heading","anchor":"Introduction-to-Exports"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest way of exporting a variable is to annotate it with the "},{"type":"codeVoice","code":"@Export"},{"text":" ","type":"text"},{"text":"attribute, like this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftGodot","","@Godot","public class ExportExample: Node3D","{","    @Export","    var number = 5","}"]},{"inlineContent":[{"text":"In that example the value 5 will be saved, and after building the current","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"project it will be visible in the property editor."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the fundamental benefits of exporting member variables is to have them"},{"text":" ","type":"text"},{"type":"text","text":"visible and editable in the editor. This way, artists and game designers can"},{"text":" ","type":"text"},{"text":"modify values that later influence how the program runs. For this, a special export syntax is provided.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Exporting can only be applied to "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","isActive":true,"type":"reference"},{"type":"text","text":"-compatible types.  The Godot"},{"type":"text","text":" "},{"type":"text","text":"core-structures and classes, as well as objects that subclass "},{"code":"SwiftGodot.Object","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Export"},{"type":"text","text":" macro only works in your class definition, and will not work"},{"text":" ","type":"text"},{"text":"on Swift class extensions.","type":"text"}],"type":"paragraph"},{"text":"Basic Usage","anchor":"Basic-Usage","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Exporting can work with fields and properties.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Export","var number: Int","","@Export","var AnotherNumber { get { ... } set { ... }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Exported members can specify a default value:"}]},{"type":"codeListing","code":["@Export","var number: Int = 0","","@Export","var text: String? = nil        \/\/ Allows for nil","","@Export","var greeting = \"Hello World\"   \/\/ Exported field specifies a default value"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Resources and nodes can be exported.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Export","public var resource: Resource { ","    get { ","        return myInternalResource","    } ","    set { ","        print (\"Setting my resource\")","    } ","}","","@Export","public var node: Node { ","    get { ","        return myInternalNode","    } ","    set { ","        print (\"Setting the node\")","    } ","}"]},{"type":"heading","level":3,"text":"Grouping Exports","anchor":"Grouping-Exports"},{"inlineContent":[{"type":"text","text":"It is possible to group your exported properties inside the Godot Inspector with"},{"text":" ","type":"text"},{"text":"the #exportGroup macro. Every exported property after this annotation will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"added to the group.  Start a new group or use #export_group (””) to break out."}],"type":"paragraph"},{"syntax":"swift","code":["#exportGroup(\"My Properties\")","@Export var number = 3"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can also specifiy that only properties with a given prefix be grouped, like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this:"}]},{"code":["#exportGroup(\"My Properties\", prefix: \"health\")","@Export var health_reload_speed = 3"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Groups cannot be nested, use #exportSubgroup to create subgroups within a group.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["#exportSubgroup(\"Extra Properties\")","#export var string = \"\"","#export var flag = false"]},{"level":3,"text":"Customizing the Exported Value","anchor":"Customizing-the-Exported-Value","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can pass a ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PropertyHint","isActive":true,"type":"reference"},{"type":"text","text":" parameter to the Export attribute, along with additional"},{"type":"text","text":" "},{"type":"text","text":"data to control how the property is surfaced in the editor."}]},{"inlineContent":[{"text":"For example, to surface the property as a file and trigger the file selector in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"UI, use the "},{"code":".file","type":"codeVoice"},{"text":" value:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Export(.file)","var GameFile: String? "],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"String as a path to a directory."}],"type":"paragraph"},{"code":["@Export(.dir)","var gameDirectory: String?"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"String as a path to a file, custom filter provided as hint.","type":"text"}]},{"syntax":"swift","code":["@Export (.file, \"*.txt\")","var GameFile: String?"],"type":"codeListing"},{"inlineContent":[{"text":"Using paths in the global filesystem is also possible, but only in scripts in tool mode.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"String as a path to a PNG file in the global filesystem.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Export (.globalFile, \"*.png\")","var toolImage: String?"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"String as a path to a directory in the global filesystem."}]},{"type":"codeListing","syntax":"swift","code":["@Export (.globalDir)","var toolDir: String?"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The multiline annotation tells the editor to show a large input field for editing over multiple lines."}]},{"syntax":"swift","type":"codeListing","code":["@Export (.multilineText)","var text: String?"]},{"anchor":"Limiting-editor-input-ranges","text":"Limiting editor input ranges","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Using the range property hint allows you to limit what can be input as a value using the editor.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow integer values from 0 to 20."}]},{"type":"codeListing","syntax":"swift","code":["@Export(.range, \"0,20,\")","var number: Int = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow integer values from -10 to 20."}]},{"type":"codeListing","syntax":"swift","code":["@Export(.range, \"-10,20,\")","var number: Int =  0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow floats from -10 to 20 and snap the value to multiples of 0.2."}]},{"type":"codeListing","code":["@Export(.range, \"-10,20,0.2\")","var number = 0"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you add the hints "},{"code":"or_greater","type":"codeVoice"},{"text":" and\/or ","type":"text"},{"code":"or_less","type":"codeVoice"},{"text":" you can go above or below the limits when","type":"text"},{"text":" ","type":"text"},{"text":"adjusting the value by typing it instead of using the slider.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Export(.range, \"0,100,1,or_greater,or_less\")","var number: Int = 0"]},{"anchor":"Floats-with-easing-hint","type":"heading","text":"Floats with easing hint","level":3},{"inlineContent":[{"type":"text","text":"Display a visual representation of the "},{"code":"ease()","type":"codeVoice"},{"type":"text","text":" function when editing."}],"type":"paragraph"},{"syntax":"swift","code":["@Export(.expEasing)","public transitionSpeed: Float = 0"],"type":"codeListing"},{"text":"Colors","type":"heading","level":3,"anchor":"Colors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Regular color given as red-green-blue-alpha value."}]},{"type":"codeListing","syntax":"swift","code":["@Export","var color: Color { get {} set {} }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Color given as red-green-blue value (alpha will always be 1)."}]},{"type":"codeListing","syntax":"swift","code":["@Export(.colorNoAlpha)","var color: Color { get {} set {} }"]},{"text":"Nodes","type":"heading","level":3,"anchor":"Nodes"},{"type":"paragraph","inlineContent":[{"text":"Since Godot 4.0, nodes can be directly exported without having to use NodePaths.","type":"text"}]},{"code":["@Export","public Node Node { get; set; }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Custom node classes can also be used, see C# global classes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Exporting NodePaths like in Godot 3.x is still possible, in case you need it:"}]},{"code":["@Export","var nodePath: NodePath","","public override func _ready() ","{","    var node = GetNode(nodePath)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you find yourself that you do not want to provide manual get\/set properties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in your export, and want to have an optional for one of the Object types, you"},{"text":" ","type":"text"},{"type":"text","text":"can use something like this:"}],"type":"paragraph"},{"type":"codeListing","code":["@Export(.nodeType, \"Camera3D\")","var camera: Camera3D? = nil"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The parameter to "},{"type":"codeVoice","code":".nodeType"},{"text":" needs to match the type of the object.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Resources","level":3,"anchor":"Resources"},{"syntax":"swift","type":"codeListing","code":["@Export","var resource: Resource { get {} set {} }"]},{"type":"paragraph","inlineContent":[{"text":"In the Inspector, you can then drag and drop a resource file from the FileSystem dock into the variable slot.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Opening the inspector dropdown may result in an extremely long list of possible classes to create, however."},{"type":"text","text":" "},{"text":"Therefore, if you specify a type derived from Resource such as:","type":"text"}]},{"code":["@Export","var resource: AnimationNode"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The drop-down menu will be limited to ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/AnimationNode","isActive":true},{"text":" and all its inherited classes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Custom resource classes can also be used, see Swift global classes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It must be noted that even if the script is not being run while in the editor, the exported"},{"text":" ","type":"text"},{"type":"text","text":"properties are still editable. This can be used in conjunction with a script in “tool” mode."}]},{"text":"Arrays","anchor":"Arrays","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"To surface arrays in Godot, use a strong type for it, for example:"}]},{"code":["@Export","var myResources: VariantCollection<Resource>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Alternatively, if you want to surface an array of Godot objects, or even your","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"own subclasses of those, use "},{"type":"codeVoice","code":"ObjectCollection<YourCustomType>"},{"text":", for example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Export","var myNodes: ObjectCollection<MySpinnerCube>"]},{"type":"heading","text":"Enumeration Values","level":3,"anchor":"Enumeration-Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To surface enumeration values, use the "},{"type":"codeVoice","code":"@Export(.enum)"},{"type":"text","text":" marker on your variable,"},{"type":"text","text":" "},{"type":"text","text":"and it is important that your enumeration conforms to "},{"code":"CaseIterable","type":"codeVoice"},{"text":" and one of","type":"text"},{"text":" ","type":"text"},{"text":"the integral types, like this:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum MyEnum: Int, CaseIterable {","    case first","    case second","}","","@Godot","class Sample: Node {","    @Export(.enum)","    var myValue: MyEnum","}"]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Exports"},"hierarchy":{"paths":[["doc:\/\/SwiftGodot\/documentation\/SwiftGodot"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"seeAlsoSections":[{"title":"Articles and Tutorials","generated":true,"identifiers":["doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Differences","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variants","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/CustomTypes","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/BindingNodes","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RunningInEditor"],"anchor":"Articles-and-Tutorials"}],"kind":"article","abstract":[{"type":"text","text":"In Godot, class members can be exported. This means their value gets saved along"},{"type":"text","text":" "},{"type":"text","text":"with the resource (such as the scene) they’re attached to. They will also be"},{"type":"text","text":" "},{"text":"available for editing in the property editor. Exporting is done by using the","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftgodot\/exports"]}],"references":{"doc://SwiftGodot/documentation/SwiftGodot/Variant":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","navigatorTitle":[{"kind":"identifier","text":"Variant"}],"abstract":[{"text":"Variant objects box various Godot Objects, you create them with one of the","type":"text"},{"type":"text","text":" "},{"text":"constructors, and you can retrieve the contents using the various extension","type":"text"},{"type":"text","text":" "},{"type":"text","text":"constructors that are declared on the various types that are wrapped."}],"kind":"symbol","role":"symbol","url":"\/documentation\/swiftgodot\/variant","title":"Variant","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Variant","kind":"identifier"}]},"doc://SwiftGodot/documentation/SwiftGodot":{"kind":"symbol","url":"\/documentation\/swiftgodot","abstract":[{"type":"text","text":"Framework to write Godot Game Extensions using the Swift Programming Language."}],"role":"collection","title":"SwiftGodot","type":"topic","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot"},"doc://SwiftGodot/documentation/SwiftGodot/RunningInEditor":{"abstract":[{"text":"There are cases where you might want some of your Swift code for your extension","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to run while it is being used in the Godot Editor."}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RunningInEditor","type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/runningineditor","title":"Running Code in the Godot Editor","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/CustomTypes":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/CustomTypes","url":"\/documentation\/swiftgodot\/customtypes","type":"topic","abstract":[{"text":"You will typically extend the functionality of your Godot game by creating","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"classes that derive from one of the various Godot types and adjust the"},{"text":" ","type":"text"},{"text":"behavior accordingly.","type":"text"}],"title":"Using Custom Types","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/Variants":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variants","url":"\/documentation\/swiftgodot\/variants","type":"topic","abstract":[{"type":"text","text":"Follow up on the fundamental building block of Godot’s data types."}],"title":"Variants","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/BindingNodes":{"type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/bindingnodes","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/BindingNodes","abstract":[{"text":"You will find yourself referencing nodes from a scene in your code.   In","type":"text"},{"type":"text","text":" "},{"text":"GDScript, that is usually achieved by using the dollar sign and the name of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"object you want to reference."}],"role":"article","title":"Referencing Nodes from your Scene"},"doc://SwiftGodot/documentation/SwiftGodot/Signals":{"abstract":[{"text":"Signals in Godot are used by objects to post interesting events that are","type":"text"},{"text":" ","type":"text"},{"text":"taking place, and can be used by users to easily add behavior and react","type":"text"},{"type":"text","text":" "},{"text":"to changes.","type":"text"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals","type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/signals","title":"Signals","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/AnimationTree":{"title":"AnimationTree","kind":"symbol","url":"\/documentation\/swiftgodot\/animationtree","role":"symbol","abstract":[{"text":"A node used for advanced animation transitions in an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/AnimationPlayer"},{"type":"text","text":"."}],"type":"topic","navigatorTitle":[{"text":"AnimationTree","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnimationTree","kind":"identifier"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/AnimationTree"},"doc://SwiftGodot/documentation/SwiftGodot/PropertyHint":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PropertyHint","abstract":[],"kind":"symbol","role":"symbol","title":"PropertyHint","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PropertyHint"}],"navigatorTitle":[{"text":"PropertyHint","kind":"identifier"}],"url":"\/documentation\/swiftgodot\/propertyhint","type":"topic"},"doc://SwiftGodot/documentation/SwiftGodot/AnimationNode":{"title":"AnimationNode","abstract":[{"type":"text","text":"Base class for "},{"isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/AnimationTree","type":"reference"},{"text":" nodes. Not related to scene nodes.","type":"text"}],"url":"\/documentation\/swiftgodot\/animationnode","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AnimationNode","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"AnimationNode","kind":"identifier"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/AnimationNode"},"doc://SwiftGodot/documentation/SwiftGodot/Differences":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Differences","url":"\/documentation\/swiftgodot\/differences","type":"topic","abstract":[{"text":"This document lists some common differences between GDSscript and SwiftGodot.","type":"text"}],"title":"SwiftGodot API differences to GDScript","role":"article"}}}