{"sections":[],"identifier":{"url":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variants","interfaceLanguage":"swift"},"abstract":[{"text":"Follow up on the fundamental building block of Godot’s data types.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Article","modules":[{"name":"SwiftGodot"}],"role":"article","title":"Variants"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"You will often find the type ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","type":"reference","isActive":true},{"type":"text","text":" in Godot source code.   Variants are"},{"text":" ","type":"text"},{"type":"text","text":"Godot’s way of passing around certain data types.  They are similar to Swift’s"},{"type":"text","text":" "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type, but they can only hold Godot types (most structures and classes"},{"type":"text","text":" "},{"text":"that derive from ","type":"text"},{"type":"codeVoice","code":"SwiftGodot.Object"},{"type":"text","text":")."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Creating Variant values","anchor":"Creating-Variant-values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create Variants from types that conform to the VariantStorable"},{"text":" ","type":"text"},{"text":"protocol.","type":"text"}]},{"inlineContent":[{"text":"This includes the following types:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Godot’s native types: GString, Vector, Rect, Transform, Plane, Quaternion,"},{"type":"text","text":" "},{"text":"AABB,  Basis, Projection, Int64, NodePaths, RIDs, Callable, GDictionary, Array","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and PackedArrays."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift types that SwiftGodot adds convenience conformances for: Bool, Int, String and Float"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Godot’s objects: e.g. Node, Area2D"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your own subclasses of SwiftGodot.Object type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Other types that you can manually conform to VariantStorable.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"You wrap your data type by calling one of the ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","isActive":true,"type":"reference"},{"type":"text","text":" constructors, and then"},{"text":" ","type":"text"},{"type":"text","text":"you can pass this variant to Godot functions that expect a "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, to pass the value "},{"code":"true","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let trueVaraint = Variant (true)"]},{"inlineContent":[{"type":"text","text":"You can get a string representation of a variant by calling "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant"},{"type":"text","text":"’s"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant\/description","isActive":true},{"text":" method:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print (trueVariant.description)"]},{"type":"paragraph","inlineContent":[{"text":"If you have a ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","isActive":true,"type":"reference"},{"type":"text","text":" and want to extract its value, you typically use this"},{"type":"text","text":" "},{"type":"text","text":"pattern:"}]},{"syntax":"swift","code":["\/\/\/ This method will return nil if the Variant provided does not contain","\/\/\/ a boolean value.   Otherwise it will contain the boolean stored in the","\/\/\/ variant.","func getBoolValue (variant: Variant) -> Bool? {","    guard let boolValue = Bool (variant) else {","        return nil","    }","    return boolValue","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftGodot provides convenience "},{"identifier":"https:\/\/developer.apple.com\/swift\/blog\/?id=17","isActive":true,"type":"reference"},{"type":"text","text":" for all the types"},{"type":"text","text":" "},{"type":"text","text":"that can be stored in a Variant.  If the variant does not contain the type you"},{"text":" ","type":"text"},{"type":"text","text":"are requesting the result of the call is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"text":"Common Usage Patterns","anchor":"Common-Usage-Patterns","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following are some examples of how to work with Variants in practice, and"},{"type":"text","text":" "},{"text":"some idioms suitable to be used with Swift.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In the following example, imagine that an API returns a Variant value that"},{"type":"text","text":" "},{"type":"text","text":"contains a dictionary with string keys and values are "},{"type":"codeVoice","code":"PackedArrayInt32"},{"type":"text","text":", this"},{"text":" ","type":"text"},{"text":"is how you would decode this:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/\/ This converts a variant that contains a dictionary of string keys and an ","\/\/\/ array of integers into the native Swift dictionary","func decode (variant: Variant) -> [String: [Int32]]? {","    guard let dict = GDictionary (variant) else {","        \/\/ If the variant is not a dictionary, we return nil","        return nil","    }","    var result = [String: [Int32]] ()","    for (key, value) in dict {","        guard let packedArray = PackedArrayInt32 (value) else {","            \/\/ If the `value` in the dictionary is not of type `PackedArrayInt32`, we ski it","            continue","        }","        result [key] = packedArray","    }","    return result","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above shows a defensive style of programming, where we prepare for the"},{"type":"text","text":" "},{"type":"text","text":"possibility that we do not receive a dictionary, or the values in the dictionary"},{"type":"text","text":" "},{"type":"text","text":"are not of type "},{"type":"codeVoice","code":"PackedArrayInt32"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following examples shows how to encode decode an array that contains","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dictionaries with file names and sizes into a Godot "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/GArray","isActive":true,"type":"reference"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"codeVoice","code":"GDictionaries"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func encode(values: [(String,Int)]) -> Variant {","    let array = GArray ()","    for (fileName, size) in values {","        let dict = GDictionary ()","        dict [\"file_name\"] = Variant (fileName)","        dict [\"size\"] = Variant (size)","        array.append (dict)","    }","    return Variant (array)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next example shows how to decode the result of the above.  The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/GArray"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/GDictionary"},{"type":"text","text":" are weakly typed, so the inverse operation takes a defensive"},{"type":"text","text":" "},{"type":"text","text":"approach."}]},{"type":"codeListing","code":["func decode(variant: Variant) -> [(String, Int)]? {","    guard let array = Array (variant) else {","        \/\/ If the variant is not an array, we return nil","        return nil","    }","    var result = [(String, Int)] ()","    for element in array {","        guard let dict = GDictionary (element) else {","            \/\/ If the element in the array is not a dictionary, we skip it","            continue","        }","        guard let fileNameV = dict [\"file_name\"], ","              let fileName = String (filenameV) else {","            \/\/ If the dictionary does not contain a string with the ","            \/\/ key \"file_name\", we skip it","            continue","        }","        guard let sizeV = dict [\"size\"],","              let size = Int (sizeV) else {","            \/\/ If the dictionary does not contain an integer with the key ","            \/\/ \"size\", or if the value can not be converted to an Int,","            \/\/ we skip it","            continue","        }","        result.append ((fileName, size))","    }","    return result","}"],"syntax":"swift"},{"text":"Extracting values from Variants","anchor":"Extracting-values-from-Variants","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you know the kind of return that a variant will return, you can invoke the","type":"text"},{"text":" ","type":"text"},{"text":"failing initializer for that specific type for most structures. Every VariantStorable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will have an "},{"code":"init(_ variant: Variant)","type":"codeVoice"},{"text":" implementation.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, this is how you could get a Vector2 from a variant:"}],"type":"paragraph"},{"code":["func distance (variant: Variant) -> Float? {","    guard let vector = Vector2 (variant) else {","\treturn nil","    }","    return vector.length ()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Notice that this might return "},{"code":"nil","type":"codeVoice"},{"text":", which would be the case if the variant","type":"text"},{"type":"text","text":" "},{"type":"text","text":"contains a different type than the one you were expecting. You can check the"},{"type":"text","text":" "},{"text":"type of the variant by accessing the ","type":"text"},{"type":"codeVoice","code":".gtype"},{"type":"text","text":" property of the variant."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Extracting Godot-derived objects from Variants","anchor":"Extracting-Godot-derived-objects-from-Variants"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Godot-derived objects are slightly different. If you know you have a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"SwiftGodot.Object"},{"type":"text","text":" stored in the variant, you can call the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant\/asObject(_:)"},{"type":"text","text":" "},{"type":"text","text":"instead.  This is a generic method, so you would invoke it like this:"}]},{"type":"codeListing","syntax":"swift","code":["func getNode (variant: Variant) -> Node? {","    guard let node = variant.asObject (Node.self)) else {","\t  return nil","    }","    return node","}"]},{"inlineContent":[{"type":"text","text":"Swift type inference can also be used, so you can avoid specifying the type if"},{"type":"text","text":" "},{"type":"text","text":"the compiler can infer the type, like here:"}],"type":"paragraph"},{"syntax":"swift","code":["func getNode (variant: Variant) -> Node? {","    var node: Node?","    node = variant.asObject ()","    return node","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The reason to rely on calling the ","type":"text"},{"code":"asObject","type":"codeVoice"},{"text":" method rather than having a","type":"text"},{"text":" ","type":"text"},{"text":"constructor for the type that takes a variant (like the case for the non-object","type":"text"},{"text":" ","type":"text"},{"text":"types) is that the method can ensure that only one instance of your objects is surfaced to Swift.","type":"text"}]},{"anchor":"Accessing-Array-Elements","type":"heading","level":2,"text":"Accessing Array Elements"},{"inlineContent":[{"type":"text","text":"Some of the variant types contain arrays, either objects, or a particular"},{"text":" ","type":"text"},{"type":"text","text":"packed version of those.   You can access the individual elements of the"},{"text":" ","type":"text"},{"text":"those with a convenient subscript provided on the array.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Calling-Variant-Methods","text":"Calling Variant Methods","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"It is possible to invoke the built-in variant methods that exist in the Godot","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"universe by using the "},{"code":"call","type":"codeVoice"},{"type":"text","text":" method on a Variant.   This is very similar to the"},{"text":" ","type":"text"},{"text":"call method on an Object.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you can invoke this generic “size” method on an array to get the"},{"text":" ","type":"text"},{"text":"size of an array, regardless of the specific type of array:","type":"text"}]},{"code":["func printSize (myArray: Variant) {","    switch variant.call(method: \"size\") {","    case .failure(let err):","        print (err)","        return 0","    case .success(let val):","        return Int (val) ?? 0","    }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/SwiftGodot\/documentation\/SwiftGodot"]]},"variants":[{"paths":["\/documentation\/swiftgodot\/variants"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","seeAlsoSections":[{"generated":true,"anchor":"Articles-and-Tutorials","identifiers":["doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Differences","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Exports","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/CustomTypes","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/BindingNodes","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RunningInEditor"],"title":"Articles and Tutorials"}],"references":{"doc://SwiftGodot/documentation/SwiftGodot/Variant/asObject(_:)":{"type":"topic","kind":"symbol","url":"\/documentation\/swiftgodot\/variant\/asobject(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asObject"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant\/asObject(_:)","abstract":[{"type":"text","text":"Attempts to cast the Variant into a SwiftGodot.Object, if the variant contains a value of type "},{"code":".object","type":"codeVoice"},{"text":", then","type":"text"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"code":".object, the value ","type":"codeVoice"},{"type":"text","text":"nil` is returned."}],"title":"asObject(_:)","role":"symbol"},"doc://SwiftGodot/documentation/SwiftGodot/CustomTypes":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/CustomTypes","url":"\/documentation\/swiftgodot\/customtypes","type":"topic","abstract":[{"text":"You will typically extend the functionality of your Godot game by creating","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"classes that derive from one of the various Godot types and adjust the"},{"text":" ","type":"text"},{"text":"behavior accordingly.","type":"text"}],"title":"Using Custom Types","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/Signals":{"abstract":[{"text":"Signals in Godot are used by objects to post interesting events that are","type":"text"},{"text":" ","type":"text"},{"text":"taking place, and can be used by users to easily add behavior and react","type":"text"},{"type":"text","text":" "},{"text":"to changes.","type":"text"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals","type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/signals","title":"Signals","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/RunningInEditor":{"abstract":[{"text":"There are cases where you might want some of your Swift code for your extension","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to run while it is being used in the Godot Editor."}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RunningInEditor","type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/runningineditor","title":"Running Code in the Godot Editor","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/GArray":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/GArray","url":"\/documentation\/swiftgodot\/garray","title":"GArray","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"GArray"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"GArray","kind":"identifier"}],"abstract":[{"text":"A built-in data structure that holds a sequence of elements.","type":"text"}]},"https://developer.apple.com/swift/blog/?id=17":{"type":"link","url":"https:\/\/developer.apple.com\/swift\/blog\/?id=17","identifier":"https:\/\/developer.apple.com\/swift\/blog\/?id=17","titleInlineContent":[{"text":"failable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initializers"}],"title":"failable initializers"},"doc://SwiftGodot/documentation/SwiftGodot/Variant/description":{"type":"topic","kind":"symbol","url":"\/documentation\/swiftgodot\/variant\/description","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"description"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant\/description","abstract":[],"title":"description","role":"symbol"},"doc://SwiftGodot/documentation/SwiftGodot/Variant":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","navigatorTitle":[{"kind":"identifier","text":"Variant"}],"abstract":[{"text":"Variant objects box various Godot Objects, you create them with one of the","type":"text"},{"type":"text","text":" "},{"text":"constructors, and you can retrieve the contents using the various extension","type":"text"},{"type":"text","text":" "},{"type":"text","text":"constructors that are declared on the various types that are wrapped."}],"kind":"symbol","role":"symbol","url":"\/documentation\/swiftgodot\/variant","title":"Variant","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Variant","kind":"identifier"}]},"doc://SwiftGodot/documentation/SwiftGodot/BindingNodes":{"type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/bindingnodes","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/BindingNodes","abstract":[{"text":"You will find yourself referencing nodes from a scene in your code.   In","type":"text"},{"type":"text","text":" "},{"text":"GDScript, that is usually achieved by using the dollar sign and the name of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"object you want to reference."}],"role":"article","title":"Referencing Nodes from your Scene"},"doc://SwiftGodot/documentation/SwiftGodot/GDictionary":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/GDictionary","abstract":[{"type":"text","text":"A built-in data structure that holds key-value pairs."}],"kind":"symbol","navigatorTitle":[{"text":"GDictionary","kind":"identifier"}],"type":"topic","url":"\/documentation\/swiftgodot\/gdictionary","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GDictionary","kind":"identifier"}],"title":"GDictionary","role":"symbol"},"doc://SwiftGodot/documentation/SwiftGodot/Exports":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Exports","url":"\/documentation\/swiftgodot\/exports","type":"topic","abstract":[{"text":"In Godot, class members can be exported. This means their value gets saved along","type":"text"},{"type":"text","text":" "},{"text":"with the resource (such as the scene) they’re attached to. They will also be","type":"text"},{"text":" ","type":"text"},{"text":"available for editing in the property editor. Exporting is done by using the","type":"text"}],"title":"Exports","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot":{"kind":"symbol","url":"\/documentation\/swiftgodot","abstract":[{"type":"text","text":"Framework to write Godot Game Extensions using the Swift Programming Language."}],"role":"collection","title":"SwiftGodot","type":"topic","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot"},"doc://SwiftGodot/documentation/SwiftGodot/Differences":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Differences","url":"\/documentation\/swiftgodot\/differences","type":"topic","abstract":[{"text":"This document lists some common differences between GDSscript and SwiftGodot.","type":"text"}],"title":"SwiftGodot API differences to GDScript","role":"article"}}}