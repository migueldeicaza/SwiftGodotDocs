{"hierarchy":{"paths":[["doc:\/\/SwiftGodot\/documentation\/SwiftGodot"]]},"abstract":[{"type":"text","text":"Signals in Godot are used by objects to post interesting events that are"},{"text":" ","type":"text"},{"type":"text","text":"taking place, and can be used by users to easily add behavior and react"},{"text":" ","type":"text"},{"type":"text","text":"to changes."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"metadata":{"role":"article","title":"Signals","roleHeading":"Article","modules":[{"name":"SwiftGodot"}]},"variants":[{"paths":["\/documentation\/swiftgodot\/signals"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"Articles and Tutorials","identifiers":["doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Differences","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variants","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Exports","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/CustomTypes","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/BindingNodes","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RunningInEditor"],"generated":true,"anchor":"Articles-and-Tutorials"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Objects in Godot can emit signals, these are notification about certain","type":"text"},{"type":"text","text":" "},{"type":"text","text":"events taking place in the objects that can be observed externally."}]},{"inlineContent":[{"text":"In SwiftGodot, there is a convenient interface to connect to a signal, as well","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a low-level framework to manually connect to signals and a mechanism to"},{"text":" ","type":"text"},{"text":"define your own signals.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Objects that emit signals typically do so by using the ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Object\/emit(signal:)","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":" "},{"text":"method (or the lower-level ","type":"text"},{"type":"codeVoice","code":"Object\/emitSignal(signal:_:)"},{"type":"text","text":" "},{"text":"function) which takes as a parameter the ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName","type":"reference","isActive":true},{"text":" of the signal as well","type":"text"},{"type":"text","text":" "},{"text":"as an optional list of additional arguments.   And users can connect to those","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"signals and direct a method to be invoked when they are raised."}]},{"type":"heading","anchor":"Using-Signals","level":2,"text":"Using Signals"},{"inlineContent":[{"type":"text","text":"To connect to a signal, find the signal that you want to connect to in your"},{"type":"text","text":" "},{"type":"text","text":"type, and then call the connect method on it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, to connect to the "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Node\/ready","type":"reference","isActive":true},{"type":"text","text":" signal, you call its connect"},{"text":" ","type":"text"},{"type":"text","text":"method, like this:"}],"type":"paragraph"},{"syntax":"swift","code":["func setupBot (robot: Node) {","    robot.ready.connect {","        print (\"The robot's node is ready\")","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Since signals in Godot can include parameters, each signal in Godot"},{"text":" ","type":"text"},{"type":"text","text":"surfaces a connect method that takes as an argument a function with the"},{"type":"text","text":" "},{"text":"precise signature that it will be invoked with.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to stop receiving notifications, you can disconnect from the"},{"text":" ","type":"text"},{"type":"text","text":"object, to do so, you must keep around the token returned by the connect"},{"type":"text","text":" "},{"text":"method, like this:","type":"text"}]},{"code":["class Demo: Node {","    var readyToken: Object","","    func setup () {","        readyToken = robot.ready.connect {","            print (\"Ready\")","        }","    }","","    func teardown () {","        robot.ready.disconnect (readyToken)","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"text":"One-shot signals","anchor":"One-shot-signals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One common idiom in Godot code is to wait for a signal to be raised before"},{"text":" ","type":"text"},{"type":"text","text":"continuing execution.   For example, you might want to wait for a timeout"},{"text":" ","type":"text"},{"text":"or an action.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In those cases, you can await the "},{"type":"codeVoice","code":"emitted"},{"text":" property of the generated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"signal, like this:"}]},{"syntax":"swift","code":["func waitTimer (scene: SceneTree) async {","    \/\/ Creates the timer","    let timer = scene.createTimer (timeSec: 3)","","    \/\/ Wait until the timer fires","    await timer.timeout.emitted","","    print (\"Done waiting!\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you do not have an async function, you can await your signal with","type":"text"},{"text":" ","type":"text"},{"text":"the following idiom:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func waitSomething (scene: SceneTree) {","    \/\/ Creates a task, but executes on the main actor","    Task { @MainActor in","        await timer.timeout.emitted","        print (\"happy on the main thread\")","    }    ","}"]},{"type":"heading","text":"Declaring your own Signals","level":2,"anchor":"Declaring-your-own-Signals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to define your own signals to broadcast them, both"},{"text":" ","type":"text"},{"type":"text","text":"to other Swift component as well as using them in Godot or from the"},{"type":"text","text":" "},{"type":"text","text":"Godot Scripting language."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Signals belong to your class, so you need to declare those once per class,"},{"type":"text","text":" "},{"type":"text","text":"and then every instance of your class can emit them."}]},{"type":"paragraph","inlineContent":[{"text":"Signals can have zero or more parameters, and you will need to declare","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the parameters that your signal consumes, any potential return values (these"},{"type":"text","text":" "},{"text":"are quite unusual, but the API supports it), and the name of your signal.","type":"text"}]},{"text":"Signals with no parameters","type":"heading","level":3,"anchor":"Signals-with-no-parameters"},{"type":"paragraph","inlineContent":[{"text":"The following example shows how to declare a a signal named ","type":"text"},{"type":"codeVoice","code":"burp"},{"type":"text","text":" that"},{"text":" ","type":"text"},{"text":"is emitted by your code:","type":"text"}]},{"code":["@Godot","class Demo: Node3D {","    #signal(\"burp\")","","    \/\/ Convenience method to emit the signal","    public func emitBurp () {","        emit(Demo.burp)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The free-standing macro "},{"code":"#signal","type":"codeVoice"},{"text":" declares a signal named burp.   This macro","type":"text"},{"type":"text","text":" "},{"text":"will turn signals using the snake-case naming convention into camel-case","type":"text"},{"text":" ","type":"text"},{"text":"names accessible in Swift.","type":"text"}]},{"inlineContent":[{"type":"text","text":"So for example if you were to declare a signal called ‘lives_changed’ it"},{"type":"text","text":" "},{"type":"text","text":"would be exposed to Godot as ‘lives_changed’, and to your Swift code as"},{"type":"text","text":" "},{"type":"text","text":"‘livesChanged’."}],"type":"paragraph"},{"text":"Signals with parameters","type":"heading","level":3,"anchor":"Signals-with-parameters"},{"inlineContent":[{"type":"text","text":"Signals can carry additional information when they are emitted, and"},{"text":" ","type":"text"},{"type":"text","text":"you can pass any type that can be encoded as a Godot Variant to them"},{"text":" ","type":"text"},{"type":"text","text":"(this includes Swift core types like integers, doubles, strings, but"},{"text":" ","type":"text"},{"text":"also Godot objects and the Godot core types;   See the documentation","type":"text"},{"type":"text","text":" "},{"text":"for ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","type":"reference"},{"text":" for more information).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To use signals with parameters, you need to declare the parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"types using the "},{"code":"arguments:","type":"codeVoice"},{"text":" parameter, specifying the Swift type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of each parameter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example we create a signal exposed to godot called"},{"type":"text","text":" "},{"code":"lives_changed","type":"codeVoice"},{"text":" that takes an integer value, and it is surfaced to Swift as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the signal ‘livesChanged’."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below also shows how to emit the signal with the additional"},{"type":"text","text":" "},{"type":"text","text":"integer payload:"}]},{"type":"codeListing","syntax":"swift","code":["@Godot ","class Player: Node2D {","    #signal(\"lives_changed\", argument: [\"new_lives_count\": Int.self])","","    func startGame() {","       emit(Player.livesChanged, 5)","    }","}"]},{"type":"heading","text":"Connecting Everything Together","anchor":"Connecting-Everything-Together","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example shows how you can create a signal and connect to it:"}]},{"code":["@Godot ","class Player: Node2D {","    #signal(\"game_started\")","    #signal(\"lives_changed\", argument: [\"new_lives_count\": Int.self])","","    func startGame() {","        \/\/ No arguments","        emit(Player.gameStarted)","","        \/\/ One argument of type int","        emit(Player.livesChanged, 5)","    }","}","","class Level: Area2D {","    func _ready() { ","       player.connect(Player.gameStarted, to: self, method: \"game_started\")","       player.connect(Player.livesChanged, to: self, method: \"myLivesChanged\")","    }","","    @Callable func myLivesChanged (newLivesCount: Int) {","        print (\"New lives: \\(newLivesCount)\")","    }","","    @Callable func game_started() { ","       GD.print(\"got game started signal!\")","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Low-Level Signal API","anchor":"Low-Level-Signal-API","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This section is here for explanation purposes, but you should not need"},{"type":"text","text":" "},{"text":"to use this in your Godot code with Swift.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Using-the-low-level-Signal-framework","text":"Using the low-level Signal framework"},{"inlineContent":[{"text":"While SwiftGodot provides a convenient way of connecting to objects,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if you need to connect to objects that are not included in the binding"},{"text":" ","type":"text"},{"text":"or you want to implement additional semantics, you can always use the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"low-level API for connecting signals."}],"type":"paragraph"},{"inlineContent":[{"text":"To connect a signal directly, you use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Object\/connect(signal:callable:flags:)"},{"text":" ","type":"text"},{"type":"text","text":"method.   The first parameter is the "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName","isActive":true,"type":"reference"},{"type":"text","text":" describing the signal"},{"text":" ","type":"text"},{"type":"text","text":"and the second one is refenrece to the method to invoke.  The "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Callable","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"is a pair of the object instance and the "},{"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName","isActive":true},{"type":"text","text":" of the method to invoke."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"code":["let callable = Callable(object: self, method: StringName (\"MyCallback\"))","object.connect(signal: \"some_signal\", callable)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This would call a method registered with Godot under the name ","type":"text"},{"code":"MyCallback","type":"codeVoice"},{"text":" ","type":"text"},{"text":"on the provided instance when the ","type":"text"},{"code":"object","type":"codeVoice"},{"type":"text","text":" raises the "},{"type":"codeVoice","code":"some_signal"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To surface a Swift method to Godot, and thus be able to reference it with"},{"text":" ","type":"text"},{"text":"a StringName, you would use a similar method to register a signal:","type":"text"}]},{"code":["func mySwiftCallback () {","   print (\"MyCallback has been invoked!\")","}","","func setup () {","    classInfo.registerMethod(","        name: \"MyCallback\", ","        flags: .default, ","        returnValue: nil, ","        arguments: [], ","        function: Demo.mySwiftCallback)","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Emitting-Signals","type":"heading","text":"Emitting Signals","level":3},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Object\/emit(signal:)","type":"reference"},{"text":" family of methods is a high-level version","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that provides some of the boilerplate information for you, and also"},{"type":"text","text":" "},{"type":"text","text":"conveniently allows you to call the emit method with any type that implements"},{"type":"text","text":" "},{"type":"text","text":"the "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/VariantStorable","type":"reference","isActive":true},{"type":"text","text":" protocol."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It is quite convenient to use as you do not need to wrap your parameters in"},{"type":"text","text":" "},{"type":"codeVoice","code":"Variants"},{"text":" nor provide the ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PropInfo","type":"reference","isActive":true},{"text":" elements for your signal definition.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When you declare signals using the #signal macro, you can trivially use this path.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Sometimes you might need to emit a signal on a foreign object, to pretend the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"object triggered that signal.  I will not pass any judgement on this, I merely"},{"text":" ","type":"text"},{"text":"want to empower you to get the job done.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In those situations, you might still want to use the convenience emit method, over"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"emitSignal"},{"text":" version.   But you will find that you can not just call the method","type":"text"},{"type":"text","text":" "},{"text":"with the signal name as you did before.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In those cases, you will need to provide both the signal name, and the argument"},{"type":"text","text":" "},{"type":"text","text":"names, like this:"}]},{"type":"codeListing","syntax":"swift","code":["let foreign: Node","","foreign.emit(signal: SignalWith1Argument(\"open\", argument1Name: \"path\"), \"\/tmp\/demo\")"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"signal","type":"codeVoice"},{"type":"text","text":" parameter is not a plain "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName","isActive":true,"type":"reference"},{"text":", instead it takes one of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SignalWithArgument types to specify the names of the arguments."}]}]}],"references":{"doc://SwiftGodot/documentation/SwiftGodot/Object/emit(signal:)":{"title":"emit(signal:)","role":"symbol","abstract":[{"text":"Emits a signal that was previously defined with the #signal macro.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"emit","kind":"identifier"},{"text":"(","kind":"text"},{"text":"signal","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10SwiftGodot21SignalWithNoArgumentsV","text":"SignalWithNoArguments"},{"text":") -> ","kind":"text"},{"text":"GodotError","preciseIdentifier":"s:10SwiftGodot0B5ErrorO","kind":"typeIdentifier"}],"url":"\/documentation\/swiftgodot\/object\/emit(signal:)","type":"topic","kind":"symbol","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Object\/emit(signal:)"},"doc://SwiftGodot/documentation/SwiftGodot/RunningInEditor":{"abstract":[{"text":"There are cases where you might want some of your Swift code for your extension","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to run while it is being used in the Godot Editor."}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RunningInEditor","type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/runningineditor","title":"Running Code in the Godot Editor","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/Object/ConnectFlags":{"abstract":[],"url":"\/documentation\/swiftgodot\/object\/connectflags","kind":"symbol","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Object\/ConnectFlags","title":"Object.ConnectFlags","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConnectFlags"}],"navigatorTitle":[{"text":"ConnectFlags","kind":"identifier"}],"type":"topic"},"doc://SwiftGodot/documentation/SwiftGodot/Variant":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","navigatorTitle":[{"kind":"identifier","text":"Variant"}],"abstract":[{"text":"Variant objects box various Godot Objects, you create them with one of the","type":"text"},{"type":"text","text":" "},{"text":"constructors, and you can retrieve the contents using the various extension","type":"text"},{"type":"text","text":" "},{"type":"text","text":"constructors that are declared on the various types that are wrapped."}],"kind":"symbol","role":"symbol","url":"\/documentation\/swiftgodot\/variant","title":"Variant","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Variant","kind":"identifier"}]},"doc://SwiftGodot/documentation/SwiftGodot/Object/connect(signal:callable:flags:)":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Object\/connect(signal:callable:flags:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"text":"StringName","preciseIdentifier":"s:10SwiftGodot10StringNameC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"callable"},{"kind":"text","text":": "},{"text":"Callable","kind":"typeIdentifier","preciseIdentifier":"s:10SwiftGodot8CallableC"},{"text":", ","kind":"text"},{"text":"flags","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10SwiftGodot0B5ErrorO","text":"GodotError","kind":"typeIdentifier"}],"title":"connect(signal:callable:flags:)","role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/swiftgodot\/object\/connect(signal:callable:flags:)","abstract":[{"text":"Connects a ","type":"text"},{"type":"codeVoice","code":"signal"},{"text":" by name to a ","type":"text"},{"code":"callable","type":"codeVoice"},{"type":"text","text":". Optional "},{"code":"flags","type":"codeVoice"},{"type":"text","text":" can be also added to configure the connection’s behavior (see "},{"isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Object\/ConnectFlags","type":"reference"},{"type":"text","text":" constants)."}]},"doc://SwiftGodot/documentation/SwiftGodot":{"kind":"symbol","url":"\/documentation\/swiftgodot","abstract":[{"type":"text","text":"Framework to write Godot Game Extensions using the Swift Programming Language."}],"role":"collection","title":"SwiftGodot","type":"topic","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot"},"doc://SwiftGodot/documentation/SwiftGodot/VariantStorable":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/VariantStorable","abstract":[{"text":"Types that conform to VariantStorable can be stored in a Variant and can be extracted","type":"text"},{"type":"text","text":" "},{"text":"back out of a Variant.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"VariantStorable"}],"type":"topic","url":"\/documentation\/swiftgodot\/variantstorable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"VariantStorable"}],"title":"VariantStorable","role":"symbol"},"doc://SwiftGodot/documentation/SwiftGodot/Exports":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Exports","url":"\/documentation\/swiftgodot\/exports","type":"topic","abstract":[{"text":"In Godot, class members can be exported. This means their value gets saved along","type":"text"},{"type":"text","text":" "},{"text":"with the resource (such as the scene) they’re attached to. They will also be","type":"text"},{"text":" ","type":"text"},{"text":"available for editing in the property editor. Exporting is done by using the","type":"text"}],"title":"Exports","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/Node/ready":{"role":"symbol","abstract":[{"type":"text","text":"Emitted when the node is considered ready, after "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Node\/_ready()","isActive":true,"type":"reference"},{"type":"text","text":" is called."}],"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"ready","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SimpleSignal","preciseIdentifier":"s:10SwiftGodot12SimpleSignalC"}],"url":"\/documentation\/swiftgodot\/node\/ready","kind":"symbol","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Node\/ready","title":"ready"},"doc://SwiftGodot/documentation/SwiftGodot/Differences":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Differences","url":"\/documentation\/swiftgodot\/differences","type":"topic","abstract":[{"text":"This document lists some common differences between GDSscript and SwiftGodot.","type":"text"}],"title":"SwiftGodot API differences to GDScript","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/Callable":{"url":"\/documentation\/swiftgodot\/callable","navigatorTitle":[{"kind":"identifier","text":"Callable"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Callable"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Callable","title":"Callable","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A built-in type representing a method or a standalone function."}],"role":"symbol"},"doc://SwiftGodot/documentation/SwiftGodot/StringName":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName","type":"topic","url":"\/documentation\/swiftgodot\/stringname","title":"StringName","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"StringName","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringName"}],"abstract":[{"text":"A built-in type for unique strings.","type":"text"}]},"doc://SwiftGodot/documentation/SwiftGodot/PropInfo":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PropInfo"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PropInfo","title":"PropInfo","navigatorTitle":[{"text":"PropInfo","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/swiftgodot\/propinfo","type":"topic","abstract":[{"type":"text","text":"PropInfo structures describe arguments to signals, and methods as well as return values from methods."}]},"doc://SwiftGodot/documentation/SwiftGodot/Node/_ready()":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"_ready","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Called when the node is “ready”, i.e. when both the node and its children have entered the scene tree. If the node has children, their "},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Node\/_ready()","type":"reference","isActive":true},{"type":"text","text":" callbacks get triggered first, and the parent node will receive the ready notification afterwards."}],"url":"\/documentation\/swiftgodot\/node\/_ready()","title":"_ready()","kind":"symbol","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Node\/_ready()"},"doc://SwiftGodot/documentation/SwiftGodot/CustomTypes":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/CustomTypes","url":"\/documentation\/swiftgodot\/customtypes","type":"topic","abstract":[{"text":"You will typically extend the functionality of your Godot game by creating","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"classes that derive from one of the various Godot types and adjust the"},{"text":" ","type":"text"},{"text":"behavior accordingly.","type":"text"}],"title":"Using Custom Types","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/Variants":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variants","url":"\/documentation\/swiftgodot\/variants","type":"topic","abstract":[{"type":"text","text":"Follow up on the fundamental building block of Godot’s data types."}],"title":"Variants","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/BindingNodes":{"type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/bindingnodes","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/BindingNodes","abstract":[{"text":"You will find yourself referencing nodes from a scene in your code.   In","type":"text"},{"type":"text","text":" "},{"text":"GDScript, that is usually achieved by using the dollar sign and the name of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"object you want to reference."}],"role":"article","title":"Referencing Nodes from your Scene"}}}