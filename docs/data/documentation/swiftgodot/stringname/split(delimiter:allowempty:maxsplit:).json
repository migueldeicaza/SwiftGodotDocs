{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName\/split(delimiter:allowEmpty:maxsplit:)"},"abstract":[{"text":"Splits the string using a ","type":"text"},{"code":"delimiter","type":"codeVoice"},{"text":" and returns an array of the substrings. If ","type":"text"},{"code":"delimiter","type":"codeVoice"},{"text":" is an empty string, each substring will be a single character. This method is the opposite of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName\/join(parts:)"},{"text":".","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"delimiter","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":" = \"\", ","kind":"text"},{"text":"allowEmpty","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":" = true, "},{"kind":"externalParam","text":"maxsplit"},{"text":": ","kind":"text"},{"text":"Int64","preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier"},{"text":" = 0) -> ","kind":"text"},{"text":"PackedStringArray","kind":"typeIdentifier","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PackedStringArray","preciseIdentifier":"s:10SwiftGodot17PackedStringArrayC"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"allowEmpty"},{"type":"text","text":" is "},{"code":"false","type":"codeVoice"},{"type":"text","text":", empty strings between adjacent delimiters are excluded from the array."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"maxsplit"},{"type":"text","text":" is greater than "},{"type":"codeVoice","code":"0"},{"text":", the number of splits may not exceed ","type":"text"},{"type":"codeVoice","code":"maxsplit"},{"text":". By default, the entire string is split.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example:"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you only need one substring from the array, consider using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName\/getSlice(delimiter:slice:)"},{"text":" which is faster. If you need to split strings with more complex rules, use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RegEx","isActive":true},{"type":"text","text":" class instead."}]}],"type":"aside","name":"Note","style":"note"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftgodot\/stringname\/split(delimiter:allowempty:maxsplit:)"]}],"kind":"symbol","metadata":{"roleHeading":"Instance Method","externalID":"s:10SwiftGodot10StringNameC5split9delimiter10allowEmpty8maxsplitAA06PackedC5ArrayCSS_Sbs5Int64VtF","modules":[{"name":"SwiftGodot"}],"symbolKind":"method","title":"split(delimiter:allowEmpty:maxsplit:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"text":"delimiter","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allowEmpty"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxsplit"},{"text":": ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"PackedStringArray","preciseIdentifier":"s:10SwiftGodot17PackedStringArrayC"}],"role":"symbol"},"hierarchy":{"paths":[["doc:\/\/SwiftGodot\/documentation\/SwiftGodot","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName"]]},"sections":[],"references":{"doc://SwiftGodot/documentation/SwiftGodot/RegEx":{"kind":"symbol","title":"RegEx","url":"\/documentation\/swiftgodot\/regex","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"RegEx","kind":"identifier"}],"navigatorTitle":[{"text":"RegEx","kind":"identifier"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RegEx","type":"topic","abstract":[{"type":"text","text":"Class for searching text for patterns using regular expressions."}]},"doc://SwiftGodot/documentation/SwiftGodot/StringName/join(parts:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"join","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"parts"},{"text":": ","kind":"text"},{"text":"PackedStringArray","preciseIdentifier":"s:10SwiftGodot17PackedStringArrayC","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"title":"join(parts:)","type":"topic","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName\/join(parts:)","url":"\/documentation\/swiftgodot\/stringname\/join(parts:)","role":"symbol","abstract":[{"type":"text","text":"Returns the concatenation of "},{"code":"parts","type":"codeVoice"},{"type":"text","text":"â€™ elements, with each element separated by the string calling this method. This method is the opposite of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName\/split(delimiter:allowEmpty:maxsplit:)"},{"type":"text","text":"."}],"kind":"symbol"},"doc://SwiftGodot/documentation/SwiftGodot/PackedStringArray":{"abstract":[{"text":"A packed array of ","type":"text"},{"type":"codeVoice","code":"String"},{"text":"s.","type":"text"}],"title":"PackedStringArray","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PackedStringArray","kind":"identifier"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PackedStringArray","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PackedStringArray"}],"role":"symbol","url":"\/documentation\/swiftgodot\/packedstringarray"},"doc://SwiftGodot/documentation/SwiftGodot/StringName/getSlice(delimiter:slice:)":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName\/getSlice(delimiter:slice:)","abstract":[{"text":"Splits the string using a ","type":"text"},{"type":"codeVoice","code":"delimiter"},{"type":"text","text":" and returns the substring at index "},{"type":"codeVoice","code":"slice"},{"text":". Returns an empty string if the ","type":"text"},{"type":"codeVoice","code":"slice"},{"type":"text","text":" does not exist."}],"type":"topic","url":"\/documentation\/swiftgodot\/stringname\/getslice(delimiter:slice:)","title":"getSlice(delimiter:slice:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getSlice"},{"kind":"text","text":"("},{"text":"delimiter","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"text":"slice","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":") -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"kind":"symbol"},"doc://SwiftGodot/documentation/SwiftGodot/StringName/split(delimiter:allowEmpty:maxsplit:)":{"url":"\/documentation\/swiftgodot\/stringname\/split(delimiter:allowempty:maxsplit:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"text":"delimiter","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"allowEmpty"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxsplit"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"PackedStringArray","preciseIdentifier":"s:10SwiftGodot17PackedStringArrayC"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName\/split(delimiter:allowEmpty:maxsplit:)","abstract":[{"type":"text","text":"Splits the string using a "},{"type":"codeVoice","code":"delimiter"},{"type":"text","text":" and returns an array of the substrings. If "},{"code":"delimiter","type":"codeVoice"},{"type":"text","text":" is an empty string, each substring will be a single character. This method is the opposite of "},{"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName\/join(parts:)","isActive":true},{"text":".","type":"text"}],"type":"topic","title":"split(delimiter:allowEmpty:maxsplit:)"},"doc://SwiftGodot/documentation/SwiftGodot":{"kind":"symbol","url":"\/documentation\/swiftgodot","abstract":[{"type":"text","text":"Framework to write Godot Game Extensions using the Swift Programming Language."}],"role":"collection","title":"SwiftGodot","type":"topic","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot"},"doc://SwiftGodot/documentation/SwiftGodot/StringName":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/StringName","type":"topic","url":"\/documentation\/swiftgodot\/stringname","title":"StringName","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"StringName","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringName"}],"abstract":[{"text":"A built-in type for unique strings.","type":"text"}]}}}