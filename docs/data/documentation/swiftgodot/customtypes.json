{"abstract":[{"type":"text","text":"You will typically extend the functionality of your Godot game by creating"},{"type":"text","text":" "},{"text":"classes that derive from one of the various Godot types and adjust the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"behavior accordingly."}],"kind":"article","hierarchy":{"paths":[["doc:\/\/SwiftGodot\/documentation\/SwiftGodot"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a subclass of a Godot type involves a few steps:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Subclassing an existing Godot type with the usual Swift syntax."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Registering your type with Godot, so users can create instances of it"},{"text":" ","type":"text"},{"type":"text","text":"and configure it from the user interface."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Augment the type with your own custom behaviors."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expose your properties, methods and signals to the Godot Editor."}]}]}],"type":"orderedList"},{"type":"heading","anchor":"Subclassing-a-Godot-Type","level":2,"text":"Subclassing a Godot Type"},{"type":"paragraph","inlineContent":[{"text":"To subclass a Godot type, you would follow the usual Swift idiom to subclass,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and annotate it with the @Godot macro, like this:"}]},{"syntax":"swift","type":"codeListing","code":["@Godot","class MySprite: Sprite {","    var timePassed: Double = 0","","    override func _process (delta: Double) {","        time_passed += delta","    ","        var newPos = Vector2(x: Float (10 + (10 * sin(time_passed * 2.0))),","                             y: Float (10.0 + (10.0 * cos(time_passed * 1.5))))","    ","        self.position = newPos","    }","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Godot"},{"text":" macro does a few things, it creates a default constructor that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"follows the convention to call the parent "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" method and performs any"},{"text":" ","type":"text"},{"type":"text","text":"registrations that you might have done in your class for variables or methods."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As you will see later, the @Godot macro is applied to a class definition, and"},{"type":"text","text":" "},{"text":"will scan your type for various other macros to integrate with Godot.   These","type":"text"},{"type":"text","text":" "},{"text":"attributes will not work if you attempt to apply those in a Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"extension-method, as the @Godot macro has no visibility into those."}],"type":"paragraph"},{"text":"Register Your Type","type":"heading","level":2,"anchor":"Register-Your-Type"},{"inlineContent":[{"type":"text","text":"Now we need to tell Godot about the existence of your type, to do this you need"},{"type":"text","text":" "},{"type":"text","text":"to call the "},{"type":"codeVoice","code":"register(type:)"},{"text":" method.   I like to register all my types at","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"startup, but you can do this at any time after the module has been initialized."}],"type":"paragraph"},{"inlineContent":[{"text":"Your module gets initialized on a callback from Godot at different stages, this","type":"text"},{"text":" ","type":"text"},{"text":"is how I register my types:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ This method will be invoked at different stages of the execution,","\/\/\/ in our example, we register the type when the level being used is","\/\/\/ `.scene`.","","func setupScene (level: GDExtension.InitializationLevel) {","    if level == .scene {","        register(type: SwiftSprite.self)","    }","}","","\/\/\/ This is the entry point referenced from the `.gdextension` file","\/\/\/ that you used to declare the Swift extension:","@_cdecl(\"swift_entry_point\")","public func swift_entry_point(","    interfacePtr: OpaquePointer?,","    libraryPtr: OpaquePointer?,","    extensionPtr: OpaquePointer?) -> UInt8","{","    print (\"SwiftSprite: Starting up\")","    guard let interfacePtr, let libraryPtr, let extensionPtr else {","        return 0","    }","    initializeSwiftModule(interfacePtr, libraryPtr, extensionPtr, initHook: setupScene, deInitHook: { x in })","    return 1","}"],"type":"codeListing"},{"text":"Defining your class behavior","level":2,"type":"heading","anchor":"Defining-your-class-behavior"},{"type":"paragraph","inlineContent":[{"text":"To make your custom type interesting, you will want to alter the default","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"behavior that Godot provides.   In Godot, this is achieved by overwriting one or"},{"type":"text","text":" "},{"type":"text","text":"more of the virtual methods available in a class."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Godot, methods that can be overwritten start with an underscore, like"},{"type":"text","text":" "},{"type":"codeVoice","code":"_ready"},{"type":"text","text":" for example."}]},{"inlineContent":[{"text":"While this would not have been my choice desining the API, I find that there is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"enough external documentation in the Godot  world, that I decided to stick to"},{"text":" ","type":"text"},{"text":"it.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In the example shown above, we overwrote the method ","type":"text"},{"code":"_process","type":"codeVoice"},{"type":"text","text":" which is invoked"},{"text":" ","type":"text"},{"type":"text","text":"continously by Godot and we use it to change the position of our sprite."}]},{"text":"Surfacing Methods, Properties and Signals","anchor":"Surfacing-Methods-Properties-and-Signals","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"In addition to modifying the behavior of a built-in type, you might want to"},{"text":" ","type":"text"},{"type":"text","text":"surface properties that would allow users to customize your type from the Godot"},{"type":"text","text":" "},{"type":"text","text":"editor, or expose methods that can be invoked by users from either other"},{"text":" ","type":"text"},{"text":"programming languages, like GDScript or C#, and you might want to surface","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals","isActive":true},{"text":" that your object emits that can be wired up externally.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To do this, you will be using the "},{"type":"codeVoice","code":"@Godot"},{"text":" macro to annotate your class, like","type":"text"},{"type":"text","text":" "},{"text":"this:","type":"text"}],"type":"paragraph"},{"code":["@Godot","class SwiftSprite: Sprite2D {","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"When you use the "},{"type":"codeVoice","code":"@Godot"},{"type":"text","text":" macro, a number of additional macros can be used inside"},{"text":" ","type":"text"},{"type":"text","text":"your class, like "},{"code":"#signal","type":"codeVoice"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"Signals.md"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@Callable"},{"type":"text","text":" to surface a method to"},{"type":"text","text":" "},{"text":"Godot, and ","type":"text"},{"type":"codeVoice","code":"@Export"},{"type":"text","text":" to "},{"type":"reference","isActive":true,"identifier":"Exports.md"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Behind the scenes these macros use the lower-level "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/ClassDB"},{"text":" API to define functions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"properties and their values."}]},{"text":"Overriding Methods","type":"heading","anchor":"Overriding-Methods","level":2},{"type":"paragraph","inlineContent":[{"text":"The Godot Object model does not surface a traditional object-oriented system.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Not all the methods surfaced by the Godot API can be overwritten.  The"},{"type":"text","text":" "},{"text":"SwiftGodot binding makes this explicit.   Methods that can be overwritten are","type":"text"},{"text":" ","type":"text"},{"text":"declared as ","type":"text"},{"type":"codeVoice","code":"open"},{"text":", while those that can not be overwritten are declared as","type":"text"},{"text":" ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Godot prefixes all of the overwritable methods with an underscore (we have seen"},{"type":"text","text":" "},{"text":"in this guide some examples already, like ","type":"text"},{"type":"codeVoice","code":"_process"},{"text":").","type":"text"}]},{"inlineContent":[{"type":"text","text":"Another important difference is that Godot does not expect your code to call the"},{"type":"text","text":" "},{"text":"“super” method, in fact, those methods do nothing in SwiftGodot.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Of course, if your Swift code relies on a class hierarhcy where you do delegate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"code to the original implementation, you should still call the base class"},{"type":"text","text":" "},{"text":"method.   For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Godot ","class Base: Node2D {","    override func _ready () { ","        \/* important work *\/ ","        \/* no need to call super._ready *\/","    }","}","","class Derived: Base {","    override func _ready () {","        \/* some prep work here *\/","        \/* because we want to execute the Base._ready important work *\/","        super._ready ()","        \/* some additional work here *\/","    }","}"]},{"inlineContent":[{"text":"You can think of those methods that can be overwritten as hooks into Godot, but","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with an important distinction.   When you override those methods, Godot knows"},{"type":"text","text":" "},{"type":"text","text":"that you overwrote them, and might take a different course of action based on it."}],"type":"paragraph"},{"text":"Surfacing Methods","type":"heading","level":3,"anchor":"Surfacing-Methods"},{"inlineContent":[{"text":"To surface a method, apply the ","type":"text"},{"type":"codeVoice","code":"@Callable"},{"text":" attribute to it, this will register","type":"text"},{"text":" ","type":"text"},{"text":"the method with Godot.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The only limitation is that the parameters of those methods need to be one"},{"text":" ","type":"text"},{"text":"of the types that Godot can surface to the rest of the engine: anything that can","type":"text"},{"type":"text","text":" "},{"text":"be passed in a ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Callable","func readyCallback (text: String) {","    print (\"readyCallback method called with value: \\(text)\")","    return nil","}"]},{"inlineContent":[{"type":"text","text":"Now your method can be invoked from the Godot editor or from scripts written in other languages."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The functions can be any of the types that can be wrapped in a"},{"type":"text","text":" "},{"type":"reference","identifier":"Variant.md","isActive":true},{"text":" including the core Swift data types for integers and","type":"text"},{"text":" ","type":"text"},{"text":"floats, the Godot Object subclasses as well as ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/VariantCollection","type":"reference"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/ObjectCollection"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"@Callable","type":"codeVoice"},{"type":"text","text":" macro only works in your class definition, and will not work"},{"type":"text","text":" "},{"text":"on Swift class extensions.","type":"text"}],"type":"paragraph"},{"text":"Surfacing Properties and Variables","anchor":"Surfacing-Properties-and-Variables","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"To surface properties and variables, use the ","type":"text"},{"type":"codeVoice","code":"Export"},{"text":" attribute on them.","type":"text"}]},{"inlineContent":[{"text":"The simplest use case works like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Godot","class Demo: Node3D {","    @Export var greeting: String = 0","}"]},{"inlineContent":[{"text":"The above code surfaces a property called ","type":"text"},{"type":"codeVoice","code":"greeting"},{"type":"text","text":" to Godot of the"},{"text":" ","type":"text"},{"type":"text","text":"type string.  Strings and numbers can be edited in many interesting"},{"type":"text","text":" "},{"type":"text","text":"ways in the Godot editor, and that is exposed via two optional parameters"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"codeVoice","code":"Export"},{"text":" attribute: a ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PropertyHint","isActive":true,"type":"reference"},{"text":" and sometimes those hints","type":"text"},{"type":"text","text":" "},{"text":"can take an optional string with additional confirmation information.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To learn more, read the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Exports","type":"reference"},{"text":" page.","type":"text"}]},{"type":"heading","text":"Signals","anchor":"Signals","level":3},{"inlineContent":[{"type":"text","text":"Surfacing signals is covered in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals"},{"text":" document.","type":"text"}],"type":"paragraph"},{"text":"Low-Leve Details: PropInfo","anchor":"Low-Leve-Details-PropInfo","type":"heading","level":2},{"inlineContent":[{"text":"In SwiftGodot, the ","type":"text"},{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PropInfo","type":"reference","isActive":true},{"type":"text","text":" structure is used to define argument types,"},{"type":"text","text":" "},{"text":"properties and return values.  You will be exposed to these when you define","type":"text"},{"type":"text","text":" "},{"type":"text","text":"signal parameters."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is only required if you do not use the various macros provided by"},{"type":"text","text":" "},{"type":"text","text":"SwiftGodot."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It looks like this:"}]},{"code":["let textArgument =  PropInfo(","    propertyType: .string,","    propertyName: StringName (\"myArg\"),","    className: \"SwiftSprite\",","    hint: .typeString,","    hintStr: \"\", ","    usage: .default)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, we are declaring a property of the Godot type string, and we call"},{"type":"text","text":" "},{"type":"text","text":"this "},{"code":"myArg","type":"codeVoice"},{"type":"text","text":".  The "},{"type":"codeVoice","code":"className"},{"type":"text","text":" is the name of the class that we are defining it,"},{"type":"text","text":" "},{"text":"and we can provide additional hints as to how this might be used (The Godot","type":"text"},{"text":" ","type":"text"},{"text":"editor can provide custom UI Editors based on this information).","type":"text"}]}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Differences","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variants","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Exports","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/BindingNodes","doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RunningInEditor"],"title":"Articles and Tutorials","anchor":"Articles-and-Tutorials"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/CustomTypes"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftgodot\/customtypes"]}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"SwiftGodot"}],"title":"Using Custom Types"},"references":{"doc://SwiftGodot/documentation/SwiftGodot/ObjectCollection":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ObjectCollection","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/ObjectCollection","navigatorTitle":[{"kind":"identifier","text":"ObjectCollection"}],"type":"topic","abstract":[{"type":"text","text":"This represents a typed array of one of the built-in types from Godot"}],"url":"\/documentation\/swiftgodot\/objectcollection","title":"ObjectCollection","role":"symbol"},"Variant.md":{"title":"Variant","identifier":"Variant.md","type":"link","url":"Variant.md","titleInlineContent":[{"text":"Variant","type":"text"}]},"doc://SwiftGodot/documentation/SwiftGodot/Exports":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Exports","url":"\/documentation\/swiftgodot\/exports","type":"topic","abstract":[{"text":"In Godot, class members can be exported. This means their value gets saved along","type":"text"},{"type":"text","text":" "},{"text":"with the resource (such as the scene) they’re attached to. They will also be","type":"text"},{"text":" ","type":"text"},{"text":"available for editing in the property editor. Exporting is done by using the","type":"text"}],"title":"Exports","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/PropInfo":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PropInfo"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PropInfo","title":"PropInfo","navigatorTitle":[{"text":"PropInfo","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/swiftgodot\/propinfo","type":"topic","abstract":[{"type":"text","text":"PropInfo structures describe arguments to signals, and methods as well as return values from methods."}]},"doc://SwiftGodot/documentation/SwiftGodot/Signals":{"abstract":[{"text":"Signals in Godot are used by objects to post interesting events that are","type":"text"},{"text":" ","type":"text"},{"text":"taking place, and can be used by users to easily add behavior and react","type":"text"},{"type":"text","text":" "},{"text":"to changes.","type":"text"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Signals","type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/signals","title":"Signals","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/ClassDB":{"abstract":[{"type":"text","text":"A class information repository."}],"type":"topic","role":"symbol","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/ClassDB","url":"\/documentation\/swiftgodot\/classdb","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ClassDB"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ClassDB","kind":"identifier"}],"title":"ClassDB"},"doc://SwiftGodot/documentation/SwiftGodot/BindingNodes":{"type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/bindingnodes","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/BindingNodes","abstract":[{"text":"You will find yourself referencing nodes from a scene in your code.   In","type":"text"},{"type":"text","text":" "},{"text":"GDScript, that is usually achieved by using the dollar sign and the name of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"object you want to reference."}],"role":"article","title":"Referencing Nodes from your Scene"},"doc://SwiftGodot/documentation/SwiftGodot":{"kind":"symbol","url":"\/documentation\/swiftgodot","abstract":[{"type":"text","text":"Framework to write Godot Game Extensions using the Swift Programming Language."}],"role":"collection","title":"SwiftGodot","type":"topic","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot"},"doc://SwiftGodot/documentation/SwiftGodot/PropertyHint":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/PropertyHint","abstract":[],"kind":"symbol","role":"symbol","title":"PropertyHint","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PropertyHint"}],"navigatorTitle":[{"text":"PropertyHint","kind":"identifier"}],"url":"\/documentation\/swiftgodot\/propertyhint","type":"topic"},"doc://SwiftGodot/documentation/SwiftGodot/Differences":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Differences","url":"\/documentation\/swiftgodot\/differences","type":"topic","abstract":[{"text":"This document lists some common differences between GDSscript and SwiftGodot.","type":"text"}],"title":"SwiftGodot API differences to GDScript","role":"article"},"doc://SwiftGodot/documentation/SwiftGodot/VariantCollection":{"url":"\/documentation\/swiftgodot\/variantcollection","navigatorTitle":[{"kind":"identifier","text":"VariantCollection"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"VariantCollection"}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/VariantCollection","title":"VariantCollection","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"This represents a typed array of one of the built-in types from Godot"}],"role":"symbol"},"doc://SwiftGodot/documentation/SwiftGodot/Variants":{"kind":"article","identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variants","url":"\/documentation\/swiftgodot\/variants","type":"topic","abstract":[{"type":"text","text":"Follow up on the fundamental building block of Godot’s data types."}],"title":"Variants","role":"article"},"Exports.md":{"title":"surface properties","titleInlineContent":[{"text":"surface properties","type":"text"}],"url":"Exports.md","identifier":"Exports.md","type":"link"},"Signals.md":{"title":"to define signals","type":"link","identifier":"Signals.md","url":"Signals.md","titleInlineContent":[{"type":"text","text":"to define signals"}]},"doc://SwiftGodot/documentation/SwiftGodot/Variant":{"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/Variant","navigatorTitle":[{"kind":"identifier","text":"Variant"}],"abstract":[{"text":"Variant objects box various Godot Objects, you create them with one of the","type":"text"},{"type":"text","text":" "},{"text":"constructors, and you can retrieve the contents using the various extension","type":"text"},{"type":"text","text":" "},{"type":"text","text":"constructors that are declared on the various types that are wrapped."}],"kind":"symbol","role":"symbol","url":"\/documentation\/swiftgodot\/variant","title":"Variant","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Variant","kind":"identifier"}]},"doc://SwiftGodot/documentation/SwiftGodot/RunningInEditor":{"abstract":[{"text":"There are cases where you might want some of your Swift code for your extension","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to run while it is being used in the Godot Editor."}],"identifier":"doc:\/\/SwiftGodot\/documentation\/SwiftGodot\/RunningInEditor","type":"topic","kind":"article","url":"\/documentation\/swiftgodot\/runningineditor","title":"Running Code in the Godot Editor","role":"article"}}}